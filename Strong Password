import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'minimumNumber' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING password
     */

    public static int minimumNumber(int n, String password) {
    // Return the minimum number of characters to make the password strong
        int lowerCase=0, upperCase=0, digit=0, specialCharacter=0;
        
        for(int i=0; i<n; i++){
            if(password.charAt(i)>='A' && password.charAt(i)<='Z')
                upperCase = 1;
            else if(password.charAt(i)>='a' && password.charAt(i)<='z')
                lowerCase = 1;
            else if(password.charAt(i)>='0' && password.charAt(i)<='9')
                digit = 1;
            else
                specialCharacter = 1;
        }
        int remainMandatoryCharacter = 4 - (lowerCase+upperCase+digit+specialCharacter);
        
        if(n<6)
            return Math.max(6-n, remainMandatoryCharacter);
        
        return remainMandatoryCharacter;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
